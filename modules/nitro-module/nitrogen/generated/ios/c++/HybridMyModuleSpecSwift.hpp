///
/// HybridMyModuleSpecSwift.hpp
/// Sat Aug 10 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridMyModuleSpec.hpp"

// Forward declaration of `HybridMyModuleSpecCxx` to properly resolve imports.
namespace MyNitroModule { class HybridMyModuleSpecCxx; }





#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "MyNitroModule-Swift.h"

namespace margelo::nitro::mymodule {

  /**
   * The C++ part of HybridMyModuleSpecCxx.swift.
   *
   * HybridMyModuleSpecSwift (C++) accesses HybridMyModuleSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridMyModuleSpecCxx can directly inherit from the C++ class HybridMyModuleSpec
   * to simplify the whole structure and memory management.
   */
  class HybridMyModuleSpecSwift final: public HybridMyModuleSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridMyModuleSpecSwift(const MyNitroModule::HybridMyModuleSpecCxx& swiftPart): HybridMyModuleSpec(), _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline MyNitroModule::HybridMyModuleSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline double addNumbers(double a, double b) override {
    auto valueOrError = _swiftPart.addNumbers(std::forward<decltype(a)>(a), std::forward<decltype(b)>(b));
    if (valueOrError.isError()) [[unlikely]] {
      throw std::runtime_error(valueOrError.getError());
    }
    auto value = valueOrError.getValue();
    return value;
  }
  inline std::string addStrings(const std::string& a, const std::string& b) override {
    auto valueOrError = _swiftPart.addStrings(std::forward<decltype(a)>(a), std::forward<decltype(b)>(b));
    if (valueOrError.isError()) [[unlikely]] {
      throw std::runtime_error(valueOrError.getError());
    }
    auto value = valueOrError.getValue();
    return value;
  }

  private:
    MyNitroModule::HybridMyModuleSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::mymodule
